{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 AndaleMono;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fswiss\fcharset0 Helvetica-Bold;\f4\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red92\green38\blue153;\red170\green13\blue145;
\red15\green104\blue160;\red28\green0\blue207;\red11\green79\blue121;\red0\green116\blue0;\red63\green110\blue116;
\red0\green0\blue233;\red2\green2\blue2;\red46\green13\blue110;\red162\green91\blue55;\red162\green91\blue55;
\red196\green26\blue22;\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c66500\c5200\c56900;
\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c24700\c43100\c45600;
\cssrgb\c0\c0\c93333;\csgenericrgb\c784\c784\c784;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c63573\c35812\c21460\c35000;\csgenericrgb\c63573\c35812\c21460;
\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c14900\c27800\c29400;}
\deftab816
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0

\f0\fs34 \cf2     @\cf3 State\cf2  \cf4 var\cf2  \cf5 completed\cf2 : \cf3 Int\cf2  = \cf6 0\cf2 \
\cf3 \
        Button(action: \{\
            self.showingAlert = true\
        \}) \{\
            Text("Show Alert")\
        \}\
        .alert(isPresented:$showingAlert) \{\
            Alert(title: Text(\'93Question?\'94), message: Text(\'93Message\'94), primaryButton: .destructive(Text("Delete")) \{\
                    print("Deleting...")\
            \}, secondaryButton: .cancel())\
        \}\
\cf4         \
    class\cf2  \cf7 Current\cf2 : \cf3 CustomDebugStringConvertible\cf2  \{\
    \cf4 var\cf2  \cf5 date\cf2 : \cf3 Date\cf2           \cf8 // if setIndex == sets.count then this is date exercise was finished otherwise date exercise was started\cf2 \
    \cf4 var\cf2  \cf5 weight\cf2 : \cf3 Double\cf2       \cf8 // may be 0.0\cf2 \
    \cf4 var\cf2  \cf5 setIndex\cf2 : \cf3 Int\cf2        \cf8 // if this is sets.count then the user has finished those sets\cf2 \
\
\cf4 enum\cf2  \cf7 Sets\cf2 : \cf3 CustomDebugStringConvertible\cf2  \{\
    \cf4 case\cf2  \cf5 durations\cf2 ([\cf9 DurationSet\cf2 ], targetDuration: \cf3 Int\cf2 ? = \cf4 nil\cf2 )\
    \cf4 case\cf2  \cf5 maxReps\cf2 (restSecs: [\cf3 Int\cf2 ], targetReps: \cf3 Int\cf2 ? = \cf4 nil\cf2 )\
    \cf4 case\cf2  \cf5 repRanges\cf2 (warmups: [\cf9 RepsSet\cf2 ], worksets: [\cf9 RepsSet\cf2 ], backoffs: [\cf9 RepsSet\cf2 ])\
\cf4 \
class\cf2  \cf7 Modality\cf2 : \cf3 CustomDebugStringConvertible\cf2  \{\
    \cf4 var\cf2  \cf5 apparatus\cf2 : \cf9 Apparatus\cf2 \
    \cf4 var\cf2  \cf5 sets\cf2 : \cf9 Sets\cf2 \
\cf4 \
class\cf2  \cf7 Expected\cf2 : \cf3 CustomDebugStringConvertible\cf2  \{\
    \cf4 var\cf2  \cf5 weight\cf2 : \cf3 Double\cf2       \cf8 // may be 0.0\cf2 \
    \cf4 var\cf2  \cf5 reps\cf2 : \cf3 Int\cf2 ?          \cf8 // set for Sets.repsRanges, indicates where the user is within a variable reps set, can also override fixed reps\cf2 \
\cf4 \
class\cf2  \cf7 Exercise\cf2 : \cf3 Hashable\cf2 , \cf3 Identifiable\cf2  \{\
    \cf4 var\cf2  \cf5 name\cf2 : \cf3 String\cf2              \cf8 // "Heavy Bench"\cf2 \
    \cf4 var\cf2  \cf5 formalName\cf2 : \cf3 String\cf2        \cf8 // "Bench Press"\cf2 \
    \cf4 var\cf2  \cf5 modality\cf2 : \cf9 Modality\cf2 \
    \cf4 var\cf2  \cf5 expected\cf2 : \cf9 Expected\cf2 \
    \cf4 var\cf2  \cf5 current\cf2 : \cf9 Current\cf2 ? = \cf4 nil\cf2  \cf8 // this is reset to nil if it's been too long since the user was doing the exercise\cf2 \
    \cf4 let\cf2  \cf5 id\cf2 : \cf3 Int\cf2 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul \ulc10 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/creating-and-combining-views"}}{\fldrslt \cf10 \ulc10 https://developer.apple.com/tutorials/swiftui/creating-and-combining-views}}\
\pard\pardeftab720\partightenfactor0

\fs24 \cf10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\fs48 \cf11 \kerning1\expnd0\expndtw0 \ulnone Personal - user data, e.g. sex, age, and fitness\
Workouts - relatively fixed list of what the user is expected to do, includes edit notes\
History - historical data for exercises, index by formal name, include exercise name, \
	maybe also workout(s) name, probably also set info, maybe also routine name\
Expected - what the user should do\
Progression - how current should change over time, usually weight, could also auto-add exercises\
Advisor - uses personal, edit notes, history, and plan to suggest edits, weight changes, etc\
Stringify - text renderer\
\
Program = Workouts + Plan + Advisor(?)\
	could have hashtable of Exercise to Current+History, maybe also Plan and Advisor\
\
\
\'95\'a0Max reps should update expected\
	- should we ask the user to confirm?\
\'95\'a0Program view should say when last workout was\
\'95\'a0Get history working somehow\
\'95 Get persistence working:\
	- history\
	- current app state\
\'95 Get notes button working\
\'95\'a0Get options button working\
\'95 Hard code some info\
	- age\
	- sex\
	- fitness level\
\'95\'a0Probably should support metric units early.\
	- maybe via a Weight class\
	- or maybe just rely on some sort of presentation function\
\'95 Would be nice to easily edit results of last exercise, especially for stuff like pullups.\
\'95\'a0Would be cool to hard-code some real lifting numbers into history.\
\'95\'a0Add a wizard to build an initial workout.\
\'95\'a0Just have a handful of starter programs. Or maybe just synthesize one based on a wizard?\
	- then user can edit without worrying about what is built-in or not\
\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/7242045-swift-package-manager-for-ios"}}{\fldrslt 
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul https://www.raywenderlich.com/7242045-swift-package-manager-for-ios}}
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul \ulc10 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/"}}{\fldrslt 
\fs38 \cf10 \ulc10 https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/}}
\f2\fs48 \cf11 \kerning1\expnd0\expndtw0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0
\cf11 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b \cf11 SwiftUI
\f2\b0 \
\'95\'a0when to use property wrappers: {\field{\*\fldinst{HYPERLINK "https://jaredsinclair.com/2020/05/07/swiftui-cheat-sheet.html"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://jaredsinclair.com/2020/05/07/swiftui-cheat-sheet.html}}\
\'aa property wrapper overview: {\field{\*\fldinst{HYPERLINK "https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/"}}{\fldrslt 
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/}}\
\'95 view.body can only have a single view: can use stacks for multiple groups\
\'95\'a0List works with identifiable data\
	either implement Identifiable protocol\
	or pass along with the data a key path to a property that uniquely identifies the element\
\'95\'a0List sub-views don\'92t have to be the same subtype, can explicitly add sub-views, or handle it similar to ForEach\
\'95\'a0List navigation requires\
	1) embed the List in a NavigationView\
	2) embed each row view within a NavigationLink (to setup transition to dest view when clicked)\
	    simple value type elements can use \\.self as the key path, see LanmarkList_Previews in {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation}}\
\'95 ForEach is like List but doesn\'92t have a special appearence\
	- can use ForEach inside List, see {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/56535326/what-is-the-difference-between-list-and-foreach-in-swiftui"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://stackoverflow.com/questions/56535326/what-is-the-difference-between-list-and-foreach-in-swiftui}}\
\'95\'a0Views can wrap other views to encapsulate a series of modifiers\
	- see CircleImage in {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation}}\
\'95 GeometryReader is used to retrieve sizing info from parent view\
\'95 animations are kind of cool: can fade or slide in and out\
\'95 can use the @State attribute to mark fields that change over time\
	- views are structs and structs can\'92t normally change their own fields, see {\field{\*\fldinst{HYPERLINK "https://medium.com/flawless-app-stories/swiftui-understanding-state-8afa23fd9f1f"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://medium.com/flawless-app-stories/swiftui-understanding-state-8afa23fd9f1f}}\
\'95 bindings act as a reference to mutable state\
\'95 ObservableObjects are bound to a view and loaded from storage\
	- @Published attribute is used to notify UI to update\
\'95 @EnvironmentObject is used to bind to data passed downward via the environmentObject modifier\
\'95 previews are used by the Canvas inspector, can use Group to show variations\
\'95 command-click brings up the structed editing popover\
\'95 {\field{\*\fldinst{HYPERLINK "https://i.stack.imgur.com/89c8C.png"}}{\fldrslt 
\f1\fs38 \cf10 \expnd0\expndtw0\kerning0
\ul https://i.stack.imgur.com/89c8C.png}}\

\f3\b \
Goals\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 \'95\'a0Make it a lot easier to change up exercises and plans\
	- probably want to lean on wizards\
	- recommend stuff like \
		` moving on to non-linear progression\
		` adding rest\
		` more protein\
		` changing rep range\
		` being more consistent\
		` conditioning\
		` address weak point (this can be specific to some of the key exercises)\
		` technique\
		` probably want to do only one of these at a time (this could be a strong recommendation)\
		` record what the change was\
	- depends on stuff like age, sex, stalled, regressed, sleep, diet, consistency, cutting\
	- probably want to remember their level\
	- wait a month after last action and provide a new recommendation (or tell them they're doing well)\
\'95\'a0Heart rate can tell you if over trained? Can we hook into other app's medical data?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b \cf11 \'95\'a0
\f2\b0 Do much bettered showing long term trends\
	- both overall and for an exercise\
	- include actions taken in response to a recommendation\
	- probably should also allow for user notes\
\'95\'a0May want a way to save the current iteration of a workout.\
\'95 Awards would be great.\
\'95 Don't worry about tracking cardio.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b\fs60 \cf11 Workouts Tab
\fs48 \
Workouts     
\f2\b0 \ul \ulc11 Edit
\f3\b \ulnone \

\f2\b0 Heavy >        
\f4\i goes to a Workout view
\f2\i0 \
Light >\
Medium >\
	\

\f3\b Heavy     
\f2\b0 \ul Edit
\f3\b \ulnone \

\f2\b0 Bench >        
\f4\i goes to an Exercise view
\f2\i0 \
Squat >\
Dead >\
\

\f3\b Bench     
\f2\b0 \ul Notes
\f3\b \ulnone  
\f2\b0 \ul Edit
\f3\b \ulnone \

\f2\b0 Set 1 of 1\
8 reps @ 125 lbs\
\ul Done\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b\fs60 \cf11 \ulnone History Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 should this have a way to see exercises that are not currently used?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b\fs60 \cf11 \
Advise Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 tell them if they are on track?\
can we make the tab red if advise is pending?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f3\b\fs60 \cf11 \
Settings Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 DoB\
gender\
level\
\
\
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0

\f0\fs34 \cf2     \
    \cf8 // Returns the currentReps and maximum used for worksets.\cf2 \
    \cf4 func\cf2  \cf5 repRange\cf2 (currentReps: \cf3 Int\cf2 ?) -> (\cf3 Int\cf2 , \cf3 Int\cf2 ) \{\
        \cf4 var\cf2  minReps = \cf6 1\cf2 \
        \cf4 var\cf2  maxReps = \cf6 1\cf2 \
        \
        \cf4 if\cf2  \cf4 let\cf2  set = \cf9 worksets\cf2 .\cf12 first\cf2 (where: \{$0.\cf9 reps\cf2 .\cf9 min\cf2  \cf12 <\cf2  $0.\cf9 reps\cf2 .\cf9 max\cf2 \}) \{\
            \cf4 if\cf2  \cf4 let\cf2  current = currentReps \{            \cf8 // currentReps only applies if set.minReps < set.maxReps\cf2 \
                minReps = current\
                maxReps = current \cf12 <\cf2  set.\cf9 reps\cf2 .\cf9 max\cf2  ? set.\cf9 reps\cf2 .\cf9 max\cf2  : current\
            \} \cf4 else\cf2  \{\
                minReps = set.\cf9 reps\cf2 .\cf9 min\cf2 \
                maxReps = set.\cf9 reps\cf2 .\cf9 max\cf2 \
            \}\
\
        \} \cf4 else\cf2  \cf4 if\cf2  \cf4 let\cf2  last = \cf9 worksets\cf2 .\cf3 last\cf2  \{\
            minReps = last.\cf9 reps\cf2 .\cf9 min\cf2 \
            maxReps = last.\cf9 reps\cf2 .\cf9 max\cf2 \
        \}\
        \
        \cf4 return\cf2  (minReps, maxReps)\
    \}\
    \
    \cf13 ///\cf2  \cf14 Returns details about what the user is expected to do for the sets. For example,\cf2 \
    \cf13 ///\cf2     \cf14 3x5 @ 195 lbs     if reps are all the same\cf2 \
    \cf13 ///\cf2     \cf14 5,3,1+ @ 195 lbs  if percentages are all the same\cf2 \
    \cf13 ///\cf2     \cf14 1+ @ 195 lbs      otherwise\cf2 \
    \cf4 func\cf2  \cf5 summary\cf2 (\cf4 _\cf2  apparatus: \cf9 Apparatus\cf2 ?, \cf4 _\cf2  targetWeight: \cf3 Double\cf2 , \cf4 _\cf2  currentReps: \cf3 Int\cf2 ?) -> \cf3 String\cf2  \{ \cf8 // TODO: not sure presentation stuff belongs here\cf2 \
        \cf4 func\cf2  \cf5 repsStr\cf2 (\cf4 _\cf2  set: \cf9 Set\cf2 ) -> \cf3 String\cf2  \{\
            \cf4 if\cf2  \cf4 let\cf2  current = currentReps \{\
                \cf4 if\cf2  current \cf12 <\cf2  set.\cf9 reps\cf2 .\cf9 max\cf2  \{\
                    \cf4 return\cf2  \cf15 "\cf2 \\(current)\cf15 -\cf2 \\(set.\cf9 reps\cf2 .\cf9 max\cf2 )\cf15 "\cf2 \
                \} \cf4 else\cf2  \{\
                    \cf4 return\cf2  \cf15 "\cf2 \\(current)\cf15 "\cf2 \
                \}\
            \} \cf4 else\cf2  \{\
                \cf4 return\cf2  \cf15 "\cf2 \\(set.\cf9 reps\cf2 .\cf9 max\cf2 )\cf15 "\cf2 \
            \}\
        \}\
        \
        \cf4 func\cf2  \cf5 weightStr\cf2 (\cf4 _\cf2  set: \cf9 Set\cf2 ) -> \cf3 String\cf2  \{\
            \cf4 var\cf2  weight = \cf15 ""\cf2 \
            \cf4 if\cf2  targetWeight > \cf6 0.0\cf2  \{\
                \cf4 let\cf2  suffix = set.\cf9 percent\cf2 .\cf9 label\cf2 \
                \cf4 if\cf2  \cf4 let\cf2  apparatus = apparatus \{\
                    weight = \cf15 " @ "\cf2  \cf12 +\cf2  apparatus.\cf16 findClosest\cf2 (targetWeight\cf16 *\cf2 set.\cf9 percent\cf2 ).\cf9 label\cf2  \cf12 +\cf2  suffix\
                \} \cf4 else\cf2  \{\
                    weight = \cf15 " @ "\cf2  \cf12 +\cf2  \cf16 friendlyUnitsStr\cf2 (targetWeight\cf16 *\cf2 set.\cf9 percent\cf2 ) \cf12 +\cf2  suffix\
                \}\
            \}\
            \cf4 return\cf2  weight\
        \}\
        \
        \cf4 if\cf2  \cf4 let\cf2  first = \cf9 worksets\cf2 .\cf3 first\cf2  \{\
            \cf4 let\cf2  sameReps = \cf9 worksets\cf2 .\cf16 all\cf2  \{$0.\cf9 reps\cf2 .\cf9 min\cf2  \cf12 ==\cf2  first.\cf9 reps\cf2 .\cf9 min\cf2  \cf12 &&\cf2  $0.\cf9 reps\cf2 .\cf9 max\cf2  \cf12 ==\cf2  first.\cf9 reps\cf2 .\cf9 max\cf2 \}\
            \cf4 let\cf2  samePercents = \cf9 worksets\cf2 .\cf16 all\cf2  \{$0.\cf9 percent\cf2 .\cf9 label\cf2  \cf12 ==\cf2  first.\cf9 percent\cf2 .\cf9 label\cf2 \}\
            \
            \cf4 if\cf2  sameReps \cf12 &&\cf2  samePercents \{\
                \cf4 return\cf2  \cf15 "\cf2 \\(\cf9 worksets\cf2 .\cf3 count\cf2 )\cf15 x\cf2 \\(\cf16 repsStr\cf2 (first))\\(\cf16 weightStr\cf2 (first))\cf15 "\cf2 \
\
            \} \cf4 else\cf2  \cf4 if\cf2  samePercents \{\
                \cf4 let\cf2  labels = \cf9 worksets\cf2 .\cf12 map\cf2  \{\cf16 repsStr\cf2 ($0)\}\
                \cf4 let\cf2  label = labels.\cf12 joined\cf2 (separator: \cf15 ","\cf2 )\
                \cf4 return\cf2  \cf15 "\cf2 \\(label)\\(\cf16 weightStr\cf2 (first))\cf15 "\cf2 \
            \
            \} \cf4 else\cf2  \cf4 if\cf2  \cf4 let\cf2  last = \cf9 worksets\cf2 .\cf3 last\cf2  \{\
                \cf4 return\cf2  \cf15 "\cf2 \\(\cf16 repsStr\cf2 (last))\\(\cf16 weightStr\cf2 (last))\cf15 "\cf2 \
            \}\
        \}\
        \cf4 return\cf2  \cf15 ""\cf2 \
    \}\
\
\pard\pardeftab720\partightenfactor0
\cf4 fileprivate\cf2  \cf4 func\cf2  \cf5 phash\cf2 () -> \cf3 Int\cf2  \{\
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0
\cf2     \cf4 return\cf2  \cf4 self\cf2 .apparatus.phash() &+ \cf4 self\cf2 .restSecs.hashValue &+ \cf4 self\cf2 .sets.phash()\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\fs48 \cf11 \
}