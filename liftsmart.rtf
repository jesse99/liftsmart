{\rtf1\ansi\ansicpg1252\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 AndaleMono;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 HelveticaNeue;\f4\fnil\fcharset0 Menlo-Regular;\f5\fswiss\fcharset0 Helvetica-Bold;
\f6\fswiss\fcharset0 Helvetica-Oblique;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red0\green0\blue0;\red11\green79\blue121;
\red63\green110\blue116;\red92\green38\blue153;\red15\green104\blue160;\red0\green116\blue0;\red196\green26\blue22;
\red0\green0\blue233;\red2\green2\blue2;\red27\green31\blue34;\red255\green255\blue255;\red31\green31\blue31;
\red14\green14\blue255;\red28\green0\blue207;\red46\green13\blue110;\red162\green91\blue55;\red162\green91\blue55;
\red38\green71\blue75;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c0\c0\c0;\csgenericrgb\c4314\c30980\c47451;
\csgenericrgb\c24700\c43100\c45600;\csgenericrgb\c35900\c14900\c60100;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c0\c45600\c0;\csgenericrgb\c77000\c10200\c8600;
\cssrgb\c0\c0\c93333;\csgenericrgb\c784\c784\c784;\cssrgb\c14118\c16078\c18039;\cssrgb\c100000\c100000\c100000;\cssrgb\c16078\c16078\c16078;
\csgenericrgb\c5500\c5500\c100000;\csgenericrgb\c11000\c0\c81000;\csgenericrgb\c18100\c5200\c43100;\csgenericrgb\c63573\c35812\c21460\c35000;\csgenericrgb\c63573\c35812\c21460;
\csgenericrgb\c14900\c27800\c29400;}
\deftab816
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0

\f0\fs34 \cf2 class\cf3  \cf4 History\cf3 : \cf5 Storable\cf3  \{\
    \cf2 class\cf3  \cf4 Record\cf3 : \cf6 CustomDebugStringConvertible\cf3 , \cf5 Storable\cf3  \{\
        \cf2 var\cf3  \cf7 completed\cf3 : \cf6 Date\cf3      \cf8 // date exercise was finished\cf3 \
        \cf2 var\cf3  \cf7 weight\cf3 : \cf6 Double\cf3       \cf8 // may be 0.0\cf3 \
        \cf2 var\cf3  \cf7 label\cf3 : \cf6 String\cf3        \cf8 // "3x60s"\cf3 \
        \cf2 var\cf3  \cf7 key\cf3 : \cf6 String\cf3          \cf8 // exercise.name + workout.name\cf3 \
        \cf2 var\cf3  \cf7 note\cf3 : \cf6 String\cf3  = \cf9 ""\cf3    \cf8 // optional arbitrary text set by user\cf3 \
\cf2 \
\cf3     \cf2 func\cf3  \cf7 exercise\cf3 (\cf2 _\cf3  workout: \cf5 Workout\cf3 , \cf2 _\cf3  exercise: \cf5 Exercise\cf3 ) -> \cf5 History\cf3 .\cf5 Iterator\cf3  \{\cf2 \
\
class\cf3  \cf4 Current\cf3 : \cf6 CustomDebugStringConvertible\cf3  \{\
    \cf2 var\cf3  \cf7 startDate\cf3 : \cf6 Date\cf3      \cf8 // date exercise was started\cf3 \
    \cf2 var\cf3  \cf7 weight\cf3 : \cf6 Double\cf3       \cf8 // may be 0.0\cf3 \
    \cf2 var\cf3  \cf7 setIndex\cf3 : \cf6 Int\cf3        \cf8 // if this is sets.count then the user has finished those sets\cf3 \
\
\cf2 enum\cf3  \cf4 Sets\cf3 : \cf6 CustomDebugStringConvertible\cf3  \{\
    \cf2 case\cf3  \cf7 durations\cf3 ([\cf5 DurationSet\cf3 ], targetDuration: \cf6 Int\cf3 ? = \cf2 nil\cf3 )\
    \cf2 case\cf3  \cf7 maxReps\cf3 (restSecs: [\cf6 Int\cf3 ], targetReps: \cf6 Int\cf3 ? = \cf2 nil\cf3 )\
    \cf2 case\cf3  \cf7 repRanges\cf3 (warmups: [\cf5 RepsSet\cf3 ], worksets: [\cf5 RepsSet\cf3 ], backoffs: [\cf5 RepsSet\cf3 ])\
\cf2 \
class\cf3  \cf4 Modality\cf3 : \cf6 CustomDebugStringConvertible\cf3  \{\
    \cf2 var\cf3  \cf7 apparatus\cf3 : \cf5 Apparatus\cf3 \
    \cf2 var\cf3  \cf7 sets\cf3 : \cf5 Sets\cf3 \
\cf2 \
class\cf3  \cf4 Expected\cf3 : \cf6 CustomDebugStringConvertible\cf3  \{\
    \cf2 var\cf3  \cf7 weight\cf3 : \cf6 Double\cf3       \cf8 // may be 0.0\cf3 \
    \cf2 var\cf3  \cf7 reps\cf3 : \cf6 Int\cf3 ?          \cf8 // set for Sets.repsRanges, indicates where the user is within a variable reps set, can also override fixed reps\cf3 \
\cf2 \
class\cf3  \cf4 Exercise\cf3 : \cf6 Hashable\cf3 , \cf6 Identifiable\cf3  \{\
    \cf2 var\cf3  \cf7 name\cf3 : \cf6 String\cf3              \cf8 // "Heavy Bench"\cf3 \
    \cf2 var\cf3  \cf7 formalName\cf3 : \cf6 String\cf3        \cf8 // "Bench Press"\cf3 \
    \cf2 var\cf3  \cf7 modality\cf3 : \cf5 Modality\cf3 \
    \cf2 var\cf3  \cf7 expected\cf3 : \cf5 Expected\cf3 \
    \cf2 var\cf3  \cf7 current\cf3 : \cf5 Current\cf3 ? = \cf2 nil\cf3  \cf8 // this is reset to nil if it's been too long since the user was doing the exercise\cf3 \
    \cf2 let\cf3  \cf7 id\cf3 : \cf6 Int\cf3 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul \ulc10 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/creating-and-combining-views"}}{\fldrslt \cf10 \ulc10 https://developer.apple.com/tutorials/swiftui/creating-and-combining-views}}\
\pard\pardeftab720\partightenfactor0

\fs24 \cf10 \ulc10 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\fs48 \cf11 \kerning1\expnd0\expndtw0 \ulnone Personal - user data, e.g. sex, age, and fitness\
Workouts - relatively fixed list of what the user is expected to do, includes edit notes\
History - historical data for exercises, index by formal name, include exercise name, \
	maybe also workout(s) name, probably also set info, maybe also routine name\
Expected - what the user should do\
Progression - how current should change over time, usually weight, could also auto-add exercises\
Advisor - uses personal, edit notes, history, and plan to suggest edits, weight changes, etc\
Stringify - text renderer\
\
Program = Workouts + Plan + Advisor(?)\
	could have hashtable of Exercise to Current+History, maybe also Plan and Advisor
\f3\fs46 \cf12 \cb13 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\sl380\partightenfactor0

\f4\fs48 \cf14 \cb1 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2 \cf11 \kerning1\expnd0\expndtw0 \
\'95 Get notes button working\
	- edit view, see 
\f0\fs34 \cf15 https://stackoverflow.com/questions/56471973/how-do-i-create-a-multiline-textfield-in-swiftui
\f2\fs48 \cf11 \
	- make sure that userNotes actually persist\
	- revert\
\'95 Make sure buttons with views have the most common action on the right\
\'95\'a0Get options button working\
\'95 Hard code some info\
	- age\
	- sex\
	- fitness level\
\'95\'a0Probably should support metric units early.\
	- maybe via a Weight class\
	- or maybe just rely on some sort of presentation function\
\'95 Would be nice to easily edit results of last exercise, especially for stuff like pullups.\
\'95\'a0Would be cool to hard-code some real lifting numbers into history.\
\'95\'a0Add a wizard to build an initial workout.\
\'95 Support stuff like leg press:\
	- should we have a DiscreteWeight type?\
\'95 Support dumbbells\
\'95\'a0Support barbells\
\'95\'a0Just have a handful of starter programs. Or maybe just synthesize one based on a wizard?\
	- then user can edit without worrying about what is built-in or not\
\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.raywenderlich.com/7242045-swift-package-manager-for-ios"}}{\fldrslt 
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul https://www.raywenderlich.com/7242045-swift-package-manager-for-ios}}
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul \ulc10 \
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/"}}{\fldrslt 
\fs38 \cf10 \ulc10 https://artsy.github.io/blog/2019/01/05/its-time-to-use-spm/}}
\f2\fs48 \cf11 \kerning1\expnd0\expndtw0 \ulnone \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0
\cf11 	\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b \cf11 SwiftUI
\f2\b0 \
\'95\'a0when to use property wrappers: {\field{\*\fldinst{HYPERLINK "https://jaredsinclair.com/2020/05/07/swiftui-cheat-sheet.html"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://jaredsinclair.com/2020/05/07/swiftui-cheat-sheet.html}}\
\'aa property wrapper overview: {\field{\*\fldinst{HYPERLINK "https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/"}}{\fldrslt 
\f1\fs36 \cf10 \expnd0\expndtw0\kerning0
\ul https://swiftwithmajid.com/2019/06/12/understanding-property-wrappers-in-swiftui/}}\
\'95 view.body can only have a single view: can use stacks for multiple groups\
\'95\'a0List works with identifiable data\
	either implement Identifiable protocol\
	or pass along with the data a key path to a property that uniquely identifies the element\
\'95\'a0List sub-views don\'92t have to be the same subtype, can explicitly add sub-views, or handle it similar to ForEach\
\'95\'a0List navigation requires\
	1) embed the List in a NavigationView\
	2) embed each row view within a NavigationLink (to setup transition to dest view when clicked)\
	    simple value type elements can use \\.self as the key path, see LanmarkList_Previews in {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation}}\
\'95 ForEach is like List but doesn\'92t have a special appearence\
	- can use ForEach inside List, see {\field{\*\fldinst{HYPERLINK "https://stackoverflow.com/questions/56535326/what-is-the-difference-between-list-and-foreach-in-swiftui"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://stackoverflow.com/questions/56535326/what-is-the-difference-between-list-and-foreach-in-swiftui}}\
\'95\'a0Views can wrap other views to encapsulate a series of modifiers\
	- see CircleImage in {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://developer.apple.com/tutorials/swiftui/building-lists-and-navigation}}\
\'95 GeometryReader is used to retrieve sizing info from parent view\
\'95 animations are kind of cool: can fade or slide in and out\
\'95 can use the @State attribute to mark fields that change over time\
	- views are structs and structs can\'92t normally change their own fields, see {\field{\*\fldinst{HYPERLINK "https://medium.com/flawless-app-stories/swiftui-understanding-state-8afa23fd9f1f"}}{\fldrslt 
\f1\fs34 \cf10 \expnd0\expndtw0\kerning0
\ul https://medium.com/flawless-app-stories/swiftui-understanding-state-8afa23fd9f1f}}\
\'95 bindings act as a reference to mutable state\
\'95 ObservableObjects are bound to a view and loaded from storage\
	- @Published attribute is used to notify UI to update\
\'95 @EnvironmentObject is used to bind to data passed downward via the environmentObject modifier\
\'95 previews are used by the Canvas inspector, can use Group to show variations\
\'95 command-click brings up the structed editing popover\
\'95 button placement: {\field{\*\fldinst{HYPERLINK "https://developer.apple.com/design/human-interface-guidelines/ios/views/alerts/"}}{\fldrslt 
\f1\fs32 \cf10 \expnd0\expndtw0\kerning0
\ul https://developer.apple.com/design/human-interface-guidelines/ios/views/alerts/}}\
\'95 font types: {\field{\*\fldinst{HYPERLINK "https://i.stack.imgur.com/89c8C.png"}}{\fldrslt 
\f1\fs38 \cf10 \expnd0\expndtw0\kerning0
\ul https://i.stack.imgur.com/89c8C.png}}\

\f5\b \
Goals\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 \'95\'a0Make it a lot easier to change up exercises and plans\
	- probably want to lean on wizards\
	- recommend stuff like \
		` moving on to non-linear progression\
		` adding rest\
		` more protein\
		` changing rep range\
		` being more consistent\
		` conditioning\
		` address weak point (this can be specific to some of the key exercises)\
		` technique\
		` probably want to do only one of these at a time (this could be a strong recommendation)\
		` record what the change was\
	- depends on stuff like age, sex, stalled, regressed, sleep, diet, consistency, cutting\
	- probably want to remember their level\
	- wait a month after last action and provide a new recommendation (or tell them they're doing well)\
\'95\'a0Heart rate can tell you if over trained? Can we hook into other app's medical data?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b \cf11 \'95\'a0
\f2\b0 Do much bettered showing long term trends\
	- both overall and for an exercise\
	- include actions taken in response to a recommendation\
	- probably should also allow for user notes\
\'95\'a0May want a way to save the current iteration of a workout.\
\'95 Awards would be great.\
\'95 Don't worry about tracking cardio.\
\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b\fs60 \cf11 Workouts Tab
\fs48 \
Workouts     
\f2\b0 \ul \ulc11 Edit
\f5\b \ulnone \

\f2\b0 Heavy >        
\f6\i goes to a Workout view
\f2\i0 \
Light >\
Medium >\
	\

\f5\b Heavy     
\f2\b0 \ul Edit
\f5\b \ulnone \

\f2\b0 Bench >        
\f6\i goes to an Exercise view
\f2\i0 \
Squat >\
Dead >\
\

\f5\b Bench     
\f2\b0 \ul Notes
\f5\b \ulnone  
\f2\b0 \ul Edit
\f5\b \ulnone \

\f2\b0 Set 1 of 1\
8 reps @ 125 lbs\
\ul Done\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b\fs60 \cf11 \ulnone History Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 should this have a way to see exercises that are not currently used?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b\fs60 \cf11 \
Advise Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 tell them if they are on track?\
can we make the tab red if advise is pending?\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f5\b\fs60 \cf11 \
Settings Tab
\fs48 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\b0 \cf11 DoB\
gender\
level\
\
\
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0

\f0\fs34 \cf3     \
    \cf8 // Returns the currentReps and maximum used for worksets.\cf3 \
    \cf2 func\cf3  \cf7 repRange\cf3 (currentReps: \cf6 Int\cf3 ?) -> (\cf6 Int\cf3 , \cf6 Int\cf3 ) \{\
        \cf2 var\cf3  minReps = \cf16 1\cf3 \
        \cf2 var\cf3  maxReps = \cf16 1\cf3 \
        \
        \cf2 if\cf3  \cf2 let\cf3  set = \cf5 worksets\cf3 .\cf17 first\cf3 (where: \{$0.\cf5 reps\cf3 .\cf5 min\cf3  \cf17 <\cf3  $0.\cf5 reps\cf3 .\cf5 max\cf3 \}) \{\
            \cf2 if\cf3  \cf2 let\cf3  current = currentReps \{            \cf8 // currentReps only applies if set.minReps < set.maxReps\cf3 \
                minReps = current\
                maxReps = current \cf17 <\cf3  set.\cf5 reps\cf3 .\cf5 max\cf3  ? set.\cf5 reps\cf3 .\cf5 max\cf3  : current\
            \} \cf2 else\cf3  \{\
                minReps = set.\cf5 reps\cf3 .\cf5 min\cf3 \
                maxReps = set.\cf5 reps\cf3 .\cf5 max\cf3 \
            \}\
\
        \} \cf2 else\cf3  \cf2 if\cf3  \cf2 let\cf3  last = \cf5 worksets\cf3 .\cf6 last\cf3  \{\
            minReps = last.\cf5 reps\cf3 .\cf5 min\cf3 \
            maxReps = last.\cf5 reps\cf3 .\cf5 max\cf3 \
        \}\
        \
        \cf2 return\cf3  (minReps, maxReps)\
    \}\
    \
    \cf18 ///\cf3  \cf19 Returns details about what the user is expected to do for the sets. For example,\cf3 \
    \cf18 ///\cf3     \cf19 3x5 @ 195 lbs     if reps are all the same\cf3 \
    \cf18 ///\cf3     \cf19 5,3,1+ @ 195 lbs  if percentages are all the same\cf3 \
    \cf18 ///\cf3     \cf19 1+ @ 195 lbs      otherwise\cf3 \
    \cf2 func\cf3  \cf7 summary\cf3 (\cf2 _\cf3  apparatus: \cf5 Apparatus\cf3 ?, \cf2 _\cf3  targetWeight: \cf6 Double\cf3 , \cf2 _\cf3  currentReps: \cf6 Int\cf3 ?) -> \cf6 String\cf3  \{ \cf8 // TODO: not sure presentation stuff belongs here\cf3 \
        \cf2 func\cf3  \cf7 repsStr\cf3 (\cf2 _\cf3  set: \cf5 Set\cf3 ) -> \cf6 String\cf3  \{\
            \cf2 if\cf3  \cf2 let\cf3  current = currentReps \{\
                \cf2 if\cf3  current \cf17 <\cf3  set.\cf5 reps\cf3 .\cf5 max\cf3  \{\
                    \cf2 return\cf3  \cf9 "\cf3 \\(current)\cf9 -\cf3 \\(set.\cf5 reps\cf3 .\cf5 max\cf3 )\cf9 "\cf3 \
                \} \cf2 else\cf3  \{\
                    \cf2 return\cf3  \cf9 "\cf3 \\(current)\cf9 "\cf3 \
                \}\
            \} \cf2 else\cf3  \{\
                \cf2 return\cf3  \cf9 "\cf3 \\(set.\cf5 reps\cf3 .\cf5 max\cf3 )\cf9 "\cf3 \
            \}\
        \}\
        \
        \cf2 func\cf3  \cf7 weightStr\cf3 (\cf2 _\cf3  set: \cf5 Set\cf3 ) -> \cf6 String\cf3  \{\
            \cf2 var\cf3  weight = \cf9 ""\cf3 \
            \cf2 if\cf3  targetWeight > \cf16 0.0\cf3  \{\
                \cf2 let\cf3  suffix = set.\cf5 percent\cf3 .\cf5 label\cf3 \
                \cf2 if\cf3  \cf2 let\cf3  apparatus = apparatus \{\
                    weight = \cf9 " @ "\cf3  \cf17 +\cf3  apparatus.\cf20 findClosest\cf3 (targetWeight\cf20 *\cf3 set.\cf5 percent\cf3 ).\cf5 label\cf3  \cf17 +\cf3  suffix\
                \} \cf2 else\cf3  \{\
                    weight = \cf9 " @ "\cf3  \cf17 +\cf3  \cf20 friendlyUnitsStr\cf3 (targetWeight\cf20 *\cf3 set.\cf5 percent\cf3 ) \cf17 +\cf3  suffix\
                \}\
            \}\
            \cf2 return\cf3  weight\
        \}\
        \
        \cf2 if\cf3  \cf2 let\cf3  first = \cf5 worksets\cf3 .\cf6 first\cf3  \{\
            \cf2 let\cf3  sameReps = \cf5 worksets\cf3 .\cf20 all\cf3  \{$0.\cf5 reps\cf3 .\cf5 min\cf3  \cf17 ==\cf3  first.\cf5 reps\cf3 .\cf5 min\cf3  \cf17 &&\cf3  $0.\cf5 reps\cf3 .\cf5 max\cf3  \cf17 ==\cf3  first.\cf5 reps\cf3 .\cf5 max\cf3 \}\
            \cf2 let\cf3  samePercents = \cf5 worksets\cf3 .\cf20 all\cf3  \{$0.\cf5 percent\cf3 .\cf5 label\cf3  \cf17 ==\cf3  first.\cf5 percent\cf3 .\cf5 label\cf3 \}\
            \
            \cf2 if\cf3  sameReps \cf17 &&\cf3  samePercents \{\
                \cf2 return\cf3  \cf9 "\cf3 \\(\cf5 worksets\cf3 .\cf6 count\cf3 )\cf9 x\cf3 \\(\cf20 repsStr\cf3 (first))\\(\cf20 weightStr\cf3 (first))\cf9 "\cf3 \
\
            \} \cf2 else\cf3  \cf2 if\cf3  samePercents \{\
                \cf2 let\cf3  labels = \cf5 worksets\cf3 .\cf17 map\cf3  \{\cf20 repsStr\cf3 ($0)\}\
                \cf2 let\cf3  label = labels.\cf17 joined\cf3 (separator: \cf9 ","\cf3 )\
                \cf2 return\cf3  \cf9 "\cf3 \\(label)\\(\cf20 weightStr\cf3 (first))\cf9 "\cf3 \
            \
            \} \cf2 else\cf3  \cf2 if\cf3  \cf2 let\cf3  last = \cf5 worksets\cf3 .\cf6 last\cf3  \{\
                \cf2 return\cf3  \cf9 "\cf3 \\(\cf20 repsStr\cf3 (last))\\(\cf20 weightStr\cf3 (last))\cf9 "\cf3 \
            \}\
        \}\
        \cf2 return\cf3  \cf9 ""\cf3 \
    \}\
\
\pard\pardeftab720\partightenfactor0
\cf2 fileprivate\cf3  \cf2 func\cf3  \cf7 phash\cf3 () -> \cf6 Int\cf3  \{\
\pard\tx816\pardeftab816\pardirnatural\partightenfactor0
\cf3     \cf2 return\cf3  \cf2 self\cf3 .apparatus.phash() &+ \cf2 self\cf3 .restSecs.hashValue &+ \cf2 self\cf3 .sets.phash()\
\}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab816\pardirnatural\partightenfactor0

\f2\fs48 \cf11 \
}